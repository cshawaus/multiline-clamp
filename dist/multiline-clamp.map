{"version":3,"sources":["webpack://multiline-clamp/webpack/universalModuleDefinition","webpack://multiline-clamp/webpack/bootstrap","webpack://multiline-clamp/./src/config.js","webpack://multiline-clamp/./src/functions.js","webpack://multiline-clamp/./src/index.js"],"names":["defaultOptions","clamp","clampSize","responsive","tagsExpression","trimWhitespace","resizeHandlerBound","resizeTimeout","multilineInstances","bindResizeHandler","window","addEventListener","clearTimeout","setTimeout","forEach","instance","registerInstanceWithResizeHandler","found","mli","target","push","mergeDefaultOptionsWithCustomOverrides","overrides","defaults","JSON","parse","stringify","HTMLElement","Number","isNaN","Object","breakpoints","keys","key","breakpoint","console","warn","length","RegExp","Boolean","MultilineClamp","options","tags","extendedOptions","originalContent","innerHTML","content","targetContents","match","characterLength","html","substring","trim","foundTags","findTagsInContent","clampFromKnownTags","replace","character","cleaned","count","test","log","appendChild","clampElement","contentClone","contentOffset","tag","offset","indexOf","substr","closing","name","clampOffset","lastFound","index","tagLength","lastTag","windowWidth","innerWidth","document","createElement","createTextNode"],"mappings":"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","file":"multiline-clamp.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"multiline-clamp\"] = factory();\n\telse\n\t\troot[\"multiline-clamp\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","/**\n * Default options for the `MultilineClamp` class.\n * @type {Object}\n */\nconst defaultOptions = {\n  /**\n   * A string or element that is appended after the clamped content.\n   * @type {String|HTMLElement}\n   */\n  clamp: '...',\n\n  /**\n   * The number of characters that should appear before the ellipsis.\n   * @type {Number}\n   */\n  clampSize: 72,\n\n  /**\n   * Allows an object of clamps to be defined for different breakpoints.\n   * @type {Boolean|Object}\n   */\n  responsive: false,\n\n  /**\n   * Regular expression for matching certain tags within the content.\n   * @type {RegExp}\n   */\n  tagsExpression: /<(.|\\n)*?>/g,\n\n  /**\n   * Should whitespace around the content be stripped out.\n   * @type {Boolean|RegExp}\n   */\n  trimWhitespace: true,\n}\n\nexport default defaultOptions\n","import defaultOptions from './config'\n\n/**\n * @type {Boolean}\n */\nlet resizeHandlerBound = false\n\n/**\n * @type {Number|null}\n */\nlet resizeTimeout\n\n/**\n * @type {Array}\n */\nconst multilineInstances = []\n\n/**\n * Binds a `resize` event to the window which is used to adjust the content clamp when the user\n * changes the size of their browser.\n */\nfunction bindResizeHandler() {\n  window.addEventListener('resize', () => {\n    // Clear the timeout\n    clearTimeout(resizeTimeout)\n\n    // Start timing for event 'completion'\n    resizeTimeout = setTimeout(() => {\n      multilineInstances.forEach(instance => instance.clamp())\n    }, 250)\n  })\n}\n\n/**\n * Pushes the `MultilineClamp` instance into an array.\n *\n * @param {MultilineClamp} instance The `MultilineClamp` instance\n */\nexport function registerInstanceWithResizeHandler(instance) {\n  let found = false\n  multilineInstances.forEach((mli) => {\n    if (mli.target === instance.target) {\n      found = true\n    }\n  })\n\n  // Only push new instances that haven't already been registered\n  if (!found) {\n    multilineInstances.push(instance)\n  }\n\n  // Bind a resize handler to the window if one already hasn't been\n  if (!resizeHandlerBound) {\n    // Simple debounce method borrowed from:\n    // http://bencentra.com/code/2015/02/27/optimizing-window-resize.html\n    bindResizeHandler()\n    resizeHandlerBound = true\n  }\n}\n\n/**\n * Overrides the default options with any user-defined ones which are valid.\n *\n * @param   {Object} overrides User-defined options\n * @returns {Object}\n */\nexport function mergeDefaultOptionsWithCustomOverrides(overrides) {\n  // Lazy clone, destroys any custom object instances\n  const defaults = JSON.parse(JSON.stringify(defaultOptions))\n\n  // Fix the broken object instances\n  defaults.tagsExpression = defaultOptions.tagsExpression\n\n  // Clamp appendix\n  if (typeof overrides.clamp === 'string' || overrides.clamp instanceof window.HTMLElement) {\n    defaults.clamp = overrides.clamp\n  }\n\n  // Clamp size for all devices\n  if (overrides.clampSize && !Number.isNaN(overrides.clampSize)) {\n    defaults.clampSize = overrides.clampSize\n  }\n\n  // Responsive behaviours\n  if (overrides.responsive !== false && overrides.responsive instanceof window.Object) {\n    const breakpoints = {}\n    const { responsive } = overrides\n\n    Object.keys(responsive).forEach((key) => {\n      const breakpoint = responsive[key]\n\n      if (Number.isNaN(breakpoint)) {\n        console.warn(`The breakpoint for '${key}' contains an invalid value:`, breakpoint)\n      } else {\n        breakpoints[key] = breakpoint\n      }\n    })\n\n    // Only assign the `breakpoints` variable if it has keys\n    defaults.responsive = (Object.keys(breakpoints).length && breakpoints) || false\n  }\n\n  // Tags expression\n  if (overrides.tagsExpression instanceof window.RegExp) {\n    defaults.tagsExpression = overrides.tagsExpression\n  }\n\n  // Whitespace trimming\n  if (overrides.trimWhitespace && (\n    overrides.trimWhitespace instanceof window.Boolean ||\n    overrides.trimWhitespace instanceof window.RegExp\n  )) {\n    defaults.trimWhitespace = overrides.trimWhitespace\n  }\n\n  return defaults\n}\n","import {\n  mergeDefaultOptionsWithCustomOverrides,\n  registerInstanceWithResizeHandler,\n} from './functions'\n\n/**\n * Enables text on a website to be truncated over multiple lines which is not widely\n * supported in CSS natively.\n *\n * @class MultilineClamp\n */\nclass MultilineClamp {\n  tags = []\n\n  /**\n   * Constructor for the `MultilineClamp` class.\n   *\n   * @param {HTMLElement} target  An target element to apply a clamp to\n   * @param {Object}      options Option overrides\n   */\n  constructor(target, options = {}) {\n    const extendedOptions = mergeDefaultOptionsWithCustomOverrides(options)\n    this.options = extendedOptions\n\n    // Define the target element and original content\n    this.target = target\n    this.originalContent = target.innerHTML\n\n    // Get the target contents\n    const content = this.targetContents\n\n    // Store the original text in memory (non-persistent between page reloads)\n    if (!target.originalContent) {\n      target.originalContent = content\n    }\n\n    // Match all the tags in the target elements content\n    if (extendedOptions.tagsExpression instanceof window.RegExp) {\n      this.tags = content.match(extendedOptions.tagsExpression)\n    }\n\n    // Start clamp'n!\n    this.clamp()\n\n    // Register this instance with the resize handler\n    registerInstanceWithResizeHandler(this)\n  }\n\n  /**\n   * Retrieves the contents of the target element and applies any triming to it.\n   *\n   * @memberof MultilineClamp\n   * @return {String}\n   */\n  get targetContents() {\n    let html = this.target.innerHTML\n    const { trimWhitespace } = this.options\n\n    if (trimWhitespace) {\n      if (trimWhitespace instanceof window.RegExp) {\n        html = html.replace(trimWhitespace, '')\n      } else {\n        html = html.trim()\n      }\n    }\n\n    return html\n  }\n\n  /**\n   * Takes the stored content string and removes part of it until the clamp size is reached.\n   *\n   * @memberof MultilineClamp\n   */\n  clamp() {\n    const { characterLength, originalContent, target } = this\n    let content = originalContent\n\n    // If the length of the content doesn't exceed the clamp size simply do nothing!\n    if (content.length <= characterLength) return\n\n    // Restore the target contents to its original value\n    if (target.html !== originalContent) {\n      target.html = originalContent\n    }\n\n    // Clamp the content\n    content = content.substring(0, characterLength).trim()\n\n    // Let's check all of the tags we have, if any are missing or cut off we need to take\n    // the string back to the point where the opening tag begins.\n    const foundTags = this.findTagsInContent()\n\n    // If tags are found, clamp the string from the point which a valid tag exists at\n    if (foundTags.length) {\n      content = this.clampFromKnownTags(foundTags, content)\n    }\n\n    // Remove any spaces from the end of the string\n    content = content.replace(/\\s+$/g, '')\n\n    // Ensure the end of the content is a letter of number and not a symbol and/or space\n    let character\n    let cleaned = false\n    let count = content.length\n\n    while (--count >= 0 && !cleaned) {\n      character = content[count]\n\n      if (/(\\w|\\d)/i.test(character)) {\n        content = content.substring(0, count + 1)\n        cleaned = true\n      }\n    }\n\n    // Update the contents for the target element\n    console.log(content)\n    target.innerHTML = content\n    target.appendChild(this.clampElement)\n  }\n\n  /**\n   * Strips away the content up until the point a tag can't be found in the string.\n   *\n   * @memberof MultilineClamp\n   * @return {Array} Tags that were found in the substring content\n   */\n  findTagsInContent() {\n    const foundTags = []\n    const { originalContent, tags } = this\n\n    let contentClone = originalContent\n    let contentOffset = 0\n\n    Object.keys(tags).forEach((tag) => {\n      tag = tags[tag]\n      const offset = contentClone.indexOf(tag)\n\n      if (offset !== -1) {\n        // Remove all the content up until this point so we can eliminate pushing the same tag twice\n        contentOffset = originalContent.length - contentClone.length\n        contentClone = contentClone.substr(offset + tag.length)\n\n        // Push the tag into the list\n        foundTags.push({\n          closing : tag.indexOf('</') !== -1,\n          name    : tag,\n          offset  : contentOffset + offset,\n        })\n      }\n    })\n\n    return foundTags\n  }\n\n  /**\n   * Uses the found tags in the clamped content to ensure that no broken tags are output to the\n   * browser which can break things.\n   *\n   * @memberof MultilineClamp\n   * @param  {Array}  foundTags Found tags in the substring content\n   * @param  {String} content   The freshly clamped content\n   * @return {String}           Modified content up until the point of the last found tag\n   */\n  clampFromKnownTags(foundTags, content) {\n    let clampOffset = content.length\n    let lastFound = false\n\n    foundTags.forEach((tag, index) => {\n      if (lastFound) return\n\n      const tagLength = tag.name.length\n      const contentOffset = content.substr(tag.offset, tagLength)\n\n      if (tagLength !== contentOffset.length) {\n        // Pull the content back to before the previous tag\n        if (tag.closing) {\n          const lastTag = foundTags[index - 1]\n          lastFound = true\n\n          clampOffset = lastTag.offset\n\n        // Otherwise pull the content back to just before this tag\n        } else {\n          clampOffset = tag.offset\n        }\n      }\n    })\n\n    return content.substring(0, clampOffset)\n  }\n\n  /**\n   * Returns the clamp size for the current breakpoint, if responsive clamps aren't enabled the\n   * default clamp size is used instead.\n   *\n   * @memberof MultilineClamp\n   * @return {Number}\n   */\n  get characterLength() {\n    const { responsive } = this.options\n    const windowWidth = window.innerWidth\n\n    let clampSize\n    if (responsive instanceof window.Object) {\n      Object.keys(responsive).forEach((breakpoint) => {\n        if (windowWidth >= breakpoint && !clampSize) {\n          clampSize = responsive[breakpoint]\n        }\n      })\n    }\n\n    return clampSize || this.options.clampSize\n  }\n\n  /**\n   * Builds the clamp element that is appended to the end of the content.\n   *\n   * @memberof MultilineClamp\n   * @return {HTMLElement}\n   */\n  get clampElement() {\n    const { clamp } = this.options\n\n    // If the clamp element is already an `HTMLElement`, simply return it\n    if (clamp instanceof window.HTMLElement) return clamp\n\n    // Create a new `span` element to wrap the clamp text within\n    const clampElement = document.createElement('span')\n    clampElement.appendChild(document.createTextNode(clamp))\n\n    return clampElement\n  }\n}\n\nexport default MultilineClamp\n\n// Expose `MultilineClamp` to the global scope\nwindow.MultilineClamp = MultilineClamp\n"],"sourceRoot":""}