{"version":3,"sources":["webpack://multiline-clamp/webpack/universalModuleDefinition","webpack://multiline-clamp/webpack/bootstrap","webpack://multiline-clamp/./src/config.js","webpack://multiline-clamp/./src/functions.js","webpack://multiline-clamp/./src/index.js"],"names":["defaultOptions","clamp","clampSize","partialTags","responsive","tagsExpression","trimWhitespace","resizeHandlerBound","resizeTimeout","multilineInstances","bindResizeHandler","window","addEventListener","clearTimeout","setTimeout","forEach","instance","refreshClamp","registerInstanceWithResizeHandler","found","mli","target","push","mergeDefaultOptionsWithCustomOverrides","overrides","defaults","JSON","parse","stringify","HTMLElement","Number","isNaN","test","Object","breakpoints","keys","key","breakpoint","console","warn","length","RegExp","Boolean","MultilineClamp","targets","options","storeClampElement","extendedOptions","NodeList","originalContent","getTargetContents","tags","match","html","innerHTML","replace","trim","characterLength","content","substring","foundTags","findTagsInContent","clampFromKnownTags","character","cleaned","count","appendChild","clampElement","contentClone","contentOffset","tag","offset","indexOf","substr","closing","element","newContent","index","tagLength","tagFromContent","lastTag","contentEnd","windowWidth","innerWidth","size","storedClampElement","cloneNode","document","createElement","createTextNode"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;wFClFA;;;;AAIA,IAAMA,iBAAiB;AACrB;;;;AAIAC,SAAO,KALc;;AAOrB;;;;AAIAC,aAAW,EAXU;;AAarB;;;;AAIAC,eAAa,UAjBQ;;AAmBrB;;;;AAIAC,cAAY,KAvBS;;AAyBrB;;;;AAIAC,kBAAgB,aA7BK;;AA+BrB;;;;AAIAC,kBAAgB,IAnCK,EAAvB,C;;;AAsCeN,c;;;;;;;;;;;;oOC1Cf,6F;;AAEA;;;AAGA,IAAIO,qBAAqB,KAAzB;;AAEA;;;AAGA,IAAIC,aAAJ;;AAEA;;;AAGA,IAAMC,qBAAqB,EAA3B;;AAEA;;;;AAIA,SAASC,iBAAT,GAA6B;AAC3BC,SAAOC,gBAAP,CAAwB,QAAxB,EAAkC,YAAM;AACtC;AACAC,iBAAaL,aAAb;;AAEA;AACAA,oBAAgBM,WAAW,YAAM;AAC/BL,yBAAmBM,OAAnB,CAA2B,4BAAYC,SAASC,YAAT,EAAZ,EAA3B;AACD,KAFe,EAEb,GAFa,CAAhB;AAGD,GARD;AASD;;AAED;;;;;AAKO,SAASC,iCAAT,CAA2CF,QAA3C,EAAqD;AAC1D,MAAIG,QAAQ,KAAZ;AACAV,qBAAmBM,OAAnB,CAA2B,UAACK,GAAD,EAAS;AAClC,QAAIA,IAAIC,MAAJ,KAAeL,SAASK,MAA5B,EAAoC;AAClCF,cAAQ,IAAR;AACD;AACF,GAJD;;AAMA;AACA,MAAI,CAACA,KAAL,EAAY;AACVV,uBAAmBa,IAAnB,CAAwBN,QAAxB;AACD;;AAED;AACA,MAAI,CAACT,kBAAL,EAAyB;AACvB;AACA;AACAG;AACAH,yBAAqB,IAArB;AACD;AACF;;AAED;;;;;;AAMO,SAASgB,sCAAT,CAAgDC,SAAhD,EAA2D;AAChE;AACA,MAAMC,WAAWC,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAe5B,eAAf,CAAX,CAAjB;;AAEA;AACAyB,WAASpB,cAAT,GAA0BL,gBAAeK,cAAzC;;AAEA;AACA,MAAI,OAAOmB,UAAUvB,KAAjB,KAA2B,QAA3B,IAAuCuB,UAAUvB,KAAV,YAA2BU,OAAOkB,WAA7E,EAA0F;AACxFJ,aAASxB,KAAT,GAAiBuB,UAAUvB,KAA3B;AACD;;AAED;AACA,MAAIuB,UAAUtB,SAAV,IAAuB,CAAC4B,OAAOC,KAAP,CAAaP,UAAUtB,SAAvB,CAA5B,EAA+D;AAC7DuB,aAASvB,SAAT,GAAqBsB,UAAUtB,SAA/B;AACD;;AAED;AACA;AACE,SAAOsB,UAAUrB,WAAjB,KAAiC,QAAjC;AACA,oCAAkC6B,IAAlC,CAAuCR,UAAUrB,WAAjD,CAFF;AAGE;AACAsB,aAAStB,WAAT,GAAuBqB,UAAUrB,WAAjC;AACD;;AAED;AACA,MAAIqB,UAAUpB,UAAV,KAAyB,KAAzB,IAAkCoB,UAAUpB,UAAV,YAAgCO,OAAOsB,MAA7E,EAAqF;AACnF,QAAMC,cAAc,EAApB,CADmF;AAE3E9B,cAF2E,GAE5DoB,SAF4D,CAE3EpB,UAF2E;;AAInF6B,WAAOE,IAAP,CAAY/B,UAAZ,EAAwBW,OAAxB,CAAgC,UAACqB,GAAD,EAAS;AACvC,UAAMC,aAAajC,WAAWgC,GAAX,CAAnB;;AAEA,UAAIN,OAAOC,KAAP,CAAaM,UAAb,CAAJ,EAA8B;AAC5BC,gBAAQC,IAAR,+BAAoCH,GAApC,mCAAuEC,UAAvE;AACD,OAFD,MAEO;AACLH,oBAAYE,GAAZ,IAAmBC,UAAnB;AACD;AACF,KARD;;AAUA;AACAZ,aAASrB,UAAT,GAAuB6B,OAAOE,IAAP,CAAYD,WAAZ,EAAyBM,MAAzB,IAAmCN,WAApC,IAAoD,KAA1E;AACD;;AAED;AACA,MAAIV,UAAUnB,cAAV,YAAoCM,OAAO8B,MAA/C,EAAuD;AACrDhB,aAASpB,cAAT,GAA0BmB,UAAUnB,cAApC;AACD;;AAED;AACA,MAAImB,UAAUlB,cAAV;AACFkB,YAAUlB,cAAV,YAAoCK,OAAO+B,OAA3C;AACAlB,YAAUlB,cAAV,YAAoCK,OAAO8B,MAFzC,CAAJ;AAGG;AACDhB,aAASnB,cAAT,GAA0BkB,UAAUlB,cAApC;AACD;;AAED,SAAOmB,QAAP;AACD,C;;;;;;;;;;;;uFC5HD,8E;;;;;AAKA;;;;;;AAMMkB,c;;;AAGJ;;;;;;AAMA,0BAAYC,OAAZ,EAAmC,sBAAdC,OAAc,uEAAJ,EAAI,4CARnCC,iBAQmC,GARf,IAQe;AACjC,QAAMC,kBAAkB,uDAAuCF,OAAvC,CAAxB;;AAEA;AACA,SAAKA,OAAL,GAAeE,eAAf;;AAEA;AACA,SAAKH,OAAL,GAAeA,mBAAmBjC,OAAOqC,QAA1B,sBAAyCJ,OAAzC,IAAoD,CAACA,OAAD,CAAnE;;AAEA;AACA,SAAKA,OAAL,CAAa7B,OAAb,CAAqB,UAACM,MAAD,EAAY;AAC/B;AACA,UAAI,CAACA,OAAO4B,eAAZ,EAA6B;AAC3B5B,eAAO4B,eAAP,GAAyB,MAAKC,iBAAL,CAAuB7B,MAAvB,CAAzB;AACD;;AAED;AACA,UAAI0B,gBAAgB1C,cAAhB,YAA0CM,OAAO8B,MAArD,EAA6D;AAC3DpB,eAAO8B,IAAP,GAAc9B,OAAO4B,eAAP,CAAuBG,KAAvB,CAA6BL,gBAAgB1C,cAA7C,KAAgE,EAA9E;AACD;;AAED;AACA,YAAKJ,KAAL,CAAWoB,MAAX;AACD,KAbD;;AAeA;AACA,sDAAkC,IAAlC;AACD;;AAED;;;;;;;AAOkBA,U,EAAQ;AACxB,UAAIgC,OAAOhC,OAAOiC,SAAlB,CADwB;AAEhBhD,oBAFgB,GAEG,KAAKuC,OAFR,CAEhBvC,cAFgB;;AAIxB,UAAIA,cAAJ,EAAoB;AAClB,YAAIA,0BAA0BK,OAAO8B,MAArC,EAA6C;AAC3CY,iBAAOA,KAAKE,OAAL,CAAajD,cAAb,EAA6B,EAA7B,CAAP;AACD,SAFD,MAEO;AACL+C,iBAAOA,KAAKG,IAAL,EAAP;AACD;AACF;;AAED,aAAOH,IAAP;AACD;;AAED;;;;;;AAMMhC,U,EAAQ;AACJoC,qBADI,GACgB,IADhB,CACJA,eADI;AAEJR,qBAFI,GAEgB5B,MAFhB,CAEJ4B,eAFI;AAGZ,UAAIS,UAAUT,eAAd;;AAEA;AACA,UAAIS,QAAQlB,MAAR,IAAkBiB,eAAtB,EAAuC;;AAEvC;AACAC,gBAAUA,QAAQC,SAAR,CAAkB,CAAlB,EAAqBF,eAArB,EAAsCD,IAAtC,EAAV;;AAEA;AACA;AACA,UAAMI,YAAY,KAAKC,iBAAL,CAAuBxC,MAAvB,CAAlB;;AAEA;AACA,UAAIuC,UAAUpB,MAAd,EAAsB;AACpBkB,kBAAU,KAAKI,kBAAL,CAAwBF,SAAxB,EAAmCF,OAAnC,CAAV;AACD;;AAED;AACAA,gBAAUA,QAAQH,OAAR,CAAgB,OAAhB,EAAyB,EAAzB,CAAV;;AAEA;AACA,UAAIQ,SAAJ;AACA,UAAIC,UAAU,KAAd;AACA,UAAIC,QAAQP,QAAQlB,MAApB;;AAEA,aAAO,EAAEyB,KAAF,IAAW,CAAX,IAAgB,CAACD,OAAxB,EAAiC;AAC/BD,oBAAYL,QAAQO,KAAR,CAAZ;;AAEA,YAAIF,cAAc,GAAd,IAAqB,WAAW/B,IAAX,CAAgB+B,SAAhB,CAAzB,EAAqD;AACnDL,oBAAUA,QAAQC,SAAR,CAAkB,CAAlB,EAAqBM,QAAQ,CAA7B,CAAV;AACAD,oBAAU,IAAV;AACD;AACF;;AAED;AACA3C,aAAOiC,SAAP,GAAmBI,OAAnB;AACArC,aAAO6C,WAAP,CAAmB,KAAKC,YAAxB;AACD;;AAED;;;AAGe;AACb,WAAKvB,OAAL,CAAa7B,OAAb,CAAqB,0BAAU,OAAKd,KAAL,CAAWoB,MAAX,CAAV,EAArB;AACD;;AAED;;;;;;;AAOkBA,U,EAAQ;AACxB,UAAMuC,YAAY,EAAlB,CADwB;AAEhBX,qBAFgB,GAEU5B,MAFV,CAEhB4B,eAFgB,CAECE,IAFD,GAEU9B,MAFV,CAEC8B,IAFD;;AAIxB,UAAIiB,eAAenB,eAAnB;AACA,UAAIoB,gBAAgB,CAApB;;AAEApC,aAAOE,IAAP,CAAYgB,IAAZ,EAAkBpC,OAAlB,CAA0B,UAACuD,GAAD,EAAS;AACjCA,cAAMnB,KAAKmB,GAAL,CAAN;AACA,YAAMC,SAASH,aAAaI,OAAb,CAAqBF,GAArB,CAAf;;AAEA,YAAIC,WAAW,CAAC,CAAhB,EAAmB;AACjB;AACAF,0BAAgBpB,gBAAgBT,MAAhB,GAAyB4B,aAAa5B,MAAtD;AACA4B,yBAAeA,aAAaK,MAAb,CAAoBF,SAASD,IAAI9B,MAAjC,CAAf;;AAEA;AACAoB,oBAAUtC,IAAV,CAAe;AACboD,qBAAUJ,IAAIE,OAAJ,CAAY,IAAZ,MAAsB,CAAC,CADpB;AAEbG,qBAAUL,GAFG;AAGbC,oBAAUF,gBAAgBE,MAHb,EAAf;;AAKD;AACF,OAhBD;;AAkBA,aAAOX,SAAP;AACD;;AAED;;;;;;;;;AASmBA,a,EAAWF,O,EAAS;AAC7BvD,iBAD6B,GACb,KAAK0C,OADQ,CAC7B1C,WAD6B;AAErC,UAAIyE,aAAalB,OAAjB;;AAEAE,gBAAU7C,OAAV,CAAkB,UAACuD,GAAD,EAAMO,KAAN,EAAgB;AAChC,YAAMC,YAAYR,IAAIK,OAAJ,CAAYnC,MAA9B;AACA,YAAMuC,iBAAiBrB,QAAQe,MAAR,CAAeH,IAAIC,MAAnB,EAA2BO,SAA3B,CAAvB;;AAEA,YAAIA,cAAcC,eAAevC,MAAjC,EAAyC;AACvC,cAAMwC,UAAUpB,UAAUiB,QAAQ,CAAlB,CAAhB;;AAEA,kBAAQ1E,WAAR;AACE,iBAAK,MAAL;AACE;AACAyE,2BAAaA,WAAWjB,SAAX,CAAqB,CAArB,EAAwBqB,QAAQT,MAAhC,CAAb;AACA;;AAEF,iBAAK,iBAAL;AACE,kBAAID,IAAII,OAAR,EAAiB;AACfE,6BAAaA,WAAWjB,SAAX,CAAqB,CAArB,EAAwBW,IAAIC,MAA5B,CAAb;;AAEA;AACA,oBAAMU,aAAaL,WAAWH,MAAX,CAAkBO,QAAQT,MAAR,GAAiBS,QAAQL,OAAR,CAAgBnC,MAAnD,CAAnB;;AAEA;AACAoC,6BAAaA,WAAWjB,SAAX,CAAqB,CAArB,EAAwBqB,QAAQT,MAAhC,IAA0CU,UAAvD;AACD;AACD;;AAEF,iBAAK,UAAL;AACA;AACE,kBAAIX,IAAII,OAAR,EAAiB;AACf;AACAE,6BAAaA,WAAWjB,SAAX,CAAqB,CAArB,EAAwBW,IAAIC,MAA5B,IAAsCD,IAAIK,OAAvD;AACD;AACD,oBAxBJ;;AA0BD;AACF,OAlCD;;AAoCA,aAAOC,UAAP;AACD;;AAED;;;;;;;AAOsB;AACc,WAAK/B,OADnB,CACZ3C,SADY,iBACZA,SADY,CACDE,UADC,iBACDA,UADC;AAEpB,UAAM8E,cAAcvE,OAAOwE,UAA3B;;AAEA,UAAIC,IAAJ;AACA,UAAIhF,sBAAsBO,OAAOsB,MAAjC,EAAyC;AACvCA,eAAOE,IAAP,CAAY/B,UAAZ,EAAwBW,OAAxB,CAAgC,UAACsB,UAAD,EAAgB;AAC9C,cAAI6C,eAAe7C,UAAf,IAA6B,CAAC+C,IAAlC,EAAwC;AACtCA,mBAAOhF,WAAWiC,UAAX,CAAP;AACD;AACF,SAJD;AAKD;;AAED,aAAO+C,QAAQlF,SAAf;AACD;;AAED;;;;;;AAMmB;AACjB;AACA,UAAI,KAAKmF,kBAAT,EAA6B;AAC3B,eAAO,KAAKA,kBAAL,CAAwBC,SAAxB,CAAkC,IAAlC,CAAP;AACD,OAJgB;;AAMTrF,WANS,GAMC,KAAK4C,OANN,CAMT5C,KANS;AAOjB,UAAIkE,eAAelE,KAAnB;;AAEA;AACA,UAAI,EAAEkE,wBAAwBxD,OAAOkB,WAAjC,CAAJ,EAAmD;AACjDsC,uBAAeoB,SAASC,aAAT,CAAuB,MAAvB,CAAf;AACArB,qBAAaD,WAAb,CAAyBqB,SAASE,cAAT,CAAwBxF,KAAxB,CAAzB;AACD;;AAED;AACA,WAAKoF,kBAAL,GAA0BlB,YAA1B;AACA,aAAOA,YAAP;AACD,K;;;AAGYxB,c;;AAEf;2BACAhC,OAAOgC,cAAP,GAAwBA,cAAxB,C","file":"multiline-clamp.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"multiline-clamp\"] = factory();\n\telse\n\t\troot[\"multiline-clamp\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","/**\n * Default options for the `MultilineClamp` class.\n * @type {Object}\n */\nconst defaultOptions = {\n  /**\n   * A string or element that is appended after the clamped content.\n   * @type {String|HTMLElement}\n   */\n  clamp: '...',\n\n  /**\n   * The number of characters that should appear before the ellipsis.\n   * @type {Number}\n   */\n  clampSize: 72,\n\n  /**\n   * Defines how partial/invalid tags are handled when found in a clamped string.\n   * @type {String}\n   */\n  partialTags: 'complete',\n\n  /**\n   * Allows an object of clamps to be defined for different breakpoints.\n   * @type {Boolean|Object}\n   */\n  responsive: false,\n\n  /**\n   * Regular expression for matching certain tags within the content.\n   * @type {RegExp}\n   */\n  tagsExpression: /<(.|\\n)*?>/g,\n\n  /**\n   * Should whitespace around the content be stripped out.\n   * @type {Boolean|RegExp}\n   */\n  trimWhitespace: true,\n}\n\nexport default defaultOptions\n","import defaultOptions from './config'\n\n/**\n * @type {Boolean}\n */\nlet resizeHandlerBound = false\n\n/**\n * @type {Number|null}\n */\nlet resizeTimeout\n\n/**\n * @type {Array}\n */\nconst multilineInstances = []\n\n/**\n * Binds a `resize` event to the window which is used to adjust the content clamp when the user\n * changes the size of their browser.\n */\nfunction bindResizeHandler() {\n  window.addEventListener('resize', () => {\n    // Clear the timeout\n    clearTimeout(resizeTimeout)\n\n    // Start timing for event 'completion'\n    resizeTimeout = setTimeout(() => {\n      multilineInstances.forEach(instance => instance.refreshClamp())\n    }, 100)\n  })\n}\n\n/**\n * Pushes the `MultilineClamp` instance into an array.\n *\n * @param {MultilineClamp} instance The `MultilineClamp` instance\n */\nexport function registerInstanceWithResizeHandler(instance) {\n  let found = false\n  multilineInstances.forEach((mli) => {\n    if (mli.target === instance.target) {\n      found = true\n    }\n  })\n\n  // Only push new instances that haven't already been registered\n  if (!found) {\n    multilineInstances.push(instance)\n  }\n\n  // Bind a resize handler to the window if one already hasn't been\n  if (!resizeHandlerBound) {\n    // Simple debounce method borrowed from:\n    // http://bencentra.com/code/2015/02/27/optimizing-window-resize.html\n    bindResizeHandler()\n    resizeHandlerBound = true\n  }\n}\n\n/**\n * Overrides the default options with any user-defined ones which are valid.\n *\n * @param   {Object} overrides User-defined options\n * @returns {Object}\n */\nexport function mergeDefaultOptionsWithCustomOverrides(overrides) {\n  // Lazy clone, destroys any custom object instances\n  const defaults = JSON.parse(JSON.stringify(defaultOptions))\n\n  // Fix the broken object instances\n  defaults.tagsExpression = defaultOptions.tagsExpression\n\n  // Clamp appendix\n  if (typeof overrides.clamp === 'string' || overrides.clamp instanceof window.HTMLElement) {\n    defaults.clamp = overrides.clamp\n  }\n\n  // Clamp size for all devices\n  if (overrides.clampSize && !Number.isNaN(overrides.clampSize)) {\n    defaults.clampSize = overrides.clampSize\n  }\n\n  // Partial tags\n  if (\n    typeof overrides.partialTags === 'string' &&\n    /^complete|pull|pull-and-retain$/.test(overrides.partialTags)\n  ) {\n    defaults.partialTags = overrides.partialTags\n  }\n\n  // Responsive behaviours\n  if (overrides.responsive !== false && overrides.responsive instanceof window.Object) {\n    const breakpoints = {}\n    const { responsive } = overrides\n\n    Object.keys(responsive).forEach((key) => {\n      const breakpoint = responsive[key]\n\n      if (Number.isNaN(breakpoint)) {\n        console.warn(`The breakpoint for '${key}' contains an invalid value:`, breakpoint)\n      } else {\n        breakpoints[key] = breakpoint\n      }\n    })\n\n    // Only assign the `breakpoints` variable if it has keys\n    defaults.responsive = (Object.keys(breakpoints).length && breakpoints) || false\n  }\n\n  // Tags expression\n  if (overrides.tagsExpression instanceof window.RegExp) {\n    defaults.tagsExpression = overrides.tagsExpression\n  }\n\n  // Whitespace trimming\n  if (overrides.trimWhitespace && (\n    overrides.trimWhitespace instanceof window.Boolean ||\n    overrides.trimWhitespace instanceof window.RegExp\n  )) {\n    defaults.trimWhitespace = overrides.trimWhitespace\n  }\n\n  return defaults\n}\n","import {\n  mergeDefaultOptionsWithCustomOverrides,\n  registerInstanceWithResizeHandler,\n} from './functions'\n\n/**\n * Enables text on a website to be truncated over multiple lines which is not widely\n * supported in CSS natively.\n *\n * @class MultilineClamp\n */\nclass MultilineClamp {\n  storeClampElement = null\n\n  /**\n   * Constructor for the `MultilineClamp` class.\n   *\n   * @param {HTMLElement|NodeList} targets Target elements to apply a clamp to\n   * @param {Object}               options Option overrides\n   */\n  constructor(targets, options = {}) {\n    const extendedOptions = mergeDefaultOptionsWithCustomOverrides(options)\n\n    // Bind the options to the instance\n    this.options = extendedOptions\n\n    // Define the target elements\n    this.targets = targets instanceof window.NodeList ? [...targets] : [targets]\n\n    // Set up each target\n    this.targets.forEach((target) => {\n      // Get the original content for the target\n      if (!target.originalContent) {\n        target.originalContent = this.getTargetContents(target)\n      }\n\n      // Match all the tags in the target elements content\n      if (extendedOptions.tagsExpression instanceof window.RegExp) {\n        target.tags = target.originalContent.match(extendedOptions.tagsExpression) || []\n      }\n\n      // Start clamp'n!\n      this.clamp(target)\n    })\n\n    // Register this instance with the resize handler\n    registerInstanceWithResizeHandler(this)\n  }\n\n  /**\n   * Retrieves the contents of the target element and applies any triming to it.\n   *\n   * @memberof MultilineClamp\n   * @param  {HTMLElement} target A target element to get content for\n   * @return {String}             The parsed contents for the target\n   */\n  getTargetContents(target) {\n    let html = target.innerHTML\n    const { trimWhitespace } = this.options\n\n    if (trimWhitespace) {\n      if (trimWhitespace instanceof window.RegExp) {\n        html = html.replace(trimWhitespace, '')\n      } else {\n        html = html.trim()\n      }\n    }\n\n    return html\n  }\n\n  /**\n   * Takes the stored content string and removes part of it until the clamp size is reached.\n   *\n   * @memberof MultilineClamp\n   * @param {HTMLElement} target Target element to apply a clamp to\n   */\n  clamp(target) {\n    const { characterLength } = this\n    const { originalContent } = target\n    let content = originalContent\n\n    // If the length of the content doesn't exceed the clamp size simply do nothing!\n    if (content.length <= characterLength) return\n\n    // Clamp the content\n    content = content.substring(0, characterLength).trim()\n\n    // Let's check all of the tags we have, if any are missing or cut off we need to take\n    // the string back to the point where the opening tag begins.\n    const foundTags = this.findTagsInContent(target)\n\n    // If tags are found, clamp the string from the point which a valid tag exists at\n    if (foundTags.length) {\n      content = this.clampFromKnownTags(foundTags, content)\n    }\n\n    // Remove any spaces from the end of the string\n    content = content.replace(/\\s+$/g, '')\n\n    // Ensure the end of the content is a letter of number and not a symbol and/or space\n    let character\n    let cleaned = false\n    let count = content.length\n\n    while (--count >= 0 && !cleaned) {\n      character = content[count]\n\n      if (character === '>' || /(\\w|\\d)/i.test(character)) {\n        content = content.substring(0, count + 1)\n        cleaned = true\n      }\n    }\n\n    // Update the contents for the target element\n    target.innerHTML = content\n    target.appendChild(this.clampElement)\n  }\n\n  /**\n   * Re-applies the clamp to each target defined.\n   */\n  refreshClamp() {\n    this.targets.forEach(target => this.clamp(target))\n  }\n\n  /**\n   * Strips away the content up until the point a tag can't be found in the string.\n   *\n   * @memberof MultilineClamp\n   * @param  {HTMLElement} target Target element to apply a clamp to\n   * @return {Array}              Tags that were found in the substring content\n   */\n  findTagsInContent(target) {\n    const foundTags = []\n    const { originalContent, tags } = target\n\n    let contentClone = originalContent\n    let contentOffset = 0\n\n    Object.keys(tags).forEach((tag) => {\n      tag = tags[tag]\n      const offset = contentClone.indexOf(tag)\n\n      if (offset !== -1) {\n        // Remove all the content up until this point so we can eliminate pushing the same tag twice\n        contentOffset = originalContent.length - contentClone.length\n        contentClone = contentClone.substr(offset + tag.length)\n\n        // Push the tag into the list\n        foundTags.push({\n          closing : tag.indexOf('</') !== -1,\n          element : tag,\n          offset  : contentOffset + offset,\n        })\n      }\n    })\n\n    return foundTags\n  }\n\n  /**\n   * Uses the found tags in the clamped content to ensure that no broken tags are output to the\n   * browser which can break things.\n   *\n   * @memberof MultilineClamp\n   * @param  {Array}  foundTags Found tags in the substring content\n   * @param  {String} content   The freshly clamped content\n   * @return {String}           Modified content up until the point of the last found tag\n   */\n  clampFromKnownTags(foundTags, content) {\n    const { partialTags } = this.options\n    let newContent = content\n\n    foundTags.forEach((tag, index) => {\n      const tagLength = tag.element.length\n      const tagFromContent = content.substr(tag.offset, tagLength)\n\n      if (tagLength !== tagFromContent.length) {\n        const lastTag = foundTags[index - 1]\n\n        switch (partialTags) {\n          case 'pull':\n            // Simply pull the content back to just before the previous tag\n            newContent = newContent.substring(0, lastTag.offset)\n            break\n\n          case 'pull-and-retain':\n            if (tag.closing) {\n              newContent = newContent.substring(0, tag.offset)\n\n              // Grab the last bit of content before the previous tag\n              const contentEnd = newContent.substr(lastTag.offset + lastTag.element.length)\n\n              // Now remove the previous tag from the content and append the original ending back on\n              newContent = newContent.substring(0, lastTag.offset) + contentEnd\n            }\n            break\n\n          case 'complete':\n          default:\n            if (tag.closing) {\n              // Fixes the incomplete tag by replacing it with the original element\n              newContent = newContent.substring(0, tag.offset) + tag.element\n            }\n            break\n        }\n      }\n    })\n\n    return newContent\n  }\n\n  /**\n   * Returns the clamp size for the current breakpoint. If responsive clamps aren't enabled\n   * the default clamp size is used instead.\n   *\n   * @memberof MultilineClamp\n   * @return {Number} The clamp size to contain the content to\n   */\n  get characterLength() {\n    const { clampSize, responsive } = this.options\n    const windowWidth = window.innerWidth\n\n    let size\n    if (responsive instanceof window.Object) {\n      Object.keys(responsive).forEach((breakpoint) => {\n        if (windowWidth <= breakpoint && !size) {\n          size = responsive[breakpoint]\n        }\n      })\n    }\n\n    return size || clampSize\n  }\n\n  /**\n   * Builds the clamp element that is appended to the end of the content.\n   *\n   * @memberof MultilineClamp\n   * @return {HTMLElement} The DOM element for the clamp\n   */\n  get clampElement() {\n    // If the clamp already exists, use the stored version and clone it\n    if (this.storedClampElement) {\n      return this.storedClampElement.cloneNode(true)\n    }\n\n    const { clamp } = this.options\n    let clampElement = clamp\n\n    // Create a new `span` element to wrap the clamp text within if the given element is a string\n    if (!(clampElement instanceof window.HTMLElement)) {\n      clampElement = document.createElement('span')\n      clampElement.appendChild(document.createTextNode(clamp))\n    }\n\n    // Cache the element away so we don't have to re-generate it again\n    this.storedClampElement = clampElement\n    return clampElement\n  }\n}\n\nexport default MultilineClamp\n\n// Expose `MultilineClamp` to the global scope\nwindow.MultilineClamp = MultilineClamp\n"],"sourceRoot":""}