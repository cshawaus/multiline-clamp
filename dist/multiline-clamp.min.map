{"version":3,"sources":["webpack://multiline-clamp/webpack/universalModuleDefinition","webpack://multiline-clamp/webpack/bootstrap","webpack://multiline-clamp/./src/config.js","webpack://multiline-clamp/./src/functions.js","webpack://multiline-clamp/./src/index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","clamp","clampSize","responsive","tagsExpression","trimWhitespace","instance","found","multilineInstances","forEach","mli","target","push","resizeHandlerBound","addEventListener","clearTimeout","resizeTimeout","setTimeout","overrides","defaults","JSON","parse","stringify","defaultOptions","HTMLElement","Number","isNaN","breakpoints","keys","key","breakpoint","console","warn","concat","length","RegExp","Boolean","_config","_functions","MultilineClamp","options","arguments","undefined","_classCallCheck","this","tags","extendedOptions","mergeDefaultOptionsWithCustomOverrides","originalContent","innerHTML","content","targetContents","match","registerInstanceWithResizeHandler","characterLength","substring","trim","character","foundTags","findTagsInContent","clampFromKnownTags","cleaned","count","replace","test","appendChild","clampElement","contentClone","contentOffset","tag","offset","indexOf","substr","closing","clampOffset","lastFound","index","tagLength","lastTag","html","windowWidth","innerWidth","document","createElement","createTextNode"],"mappings":"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","file":"multiline-clamp.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"multiline-clamp\"] = factory();\n\telse\n\t\troot[\"multiline-clamp\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","/**\n * Default options for the `MultilineClamp` class.\n * @type {Object}\n */\nconst defaultOptions = {\n  /**\n   * A string or element that is appended after the clamped content.\n   * @type {String|HTMLElement}\n   */\n  clamp: '...',\n\n  /**\n   * The number of characters that should appear before the ellipsis.\n   * @type {Number}\n   */\n  clampSize: 72,\n\n  /**\n   * Allows an object of clamps to be defined for different breakpoints.\n   * @type {Boolean|Object}\n   */\n  responsive: false,\n\n  /**\n   * Regular expression for matching certain tags within the content.\n   * @type {RegExp}\n   */\n  tagsExpression: /<(.|\\n)*?>/g,\n\n  /**\n   * Should whitespace around the content be stripped out.\n   * @type {Boolean|RegExp}\n   */\n  trimWhitespace: true,\n}\n\nexport default defaultOptions\n","import defaultOptions from './config'\n\n/**\n * @type {Boolean}\n */\nlet resizeHandlerBound = false\n\n/**\n * @type {Number|null}\n */\nlet resizeTimeout\n\n/**\n * @type {Array}\n */\nconst multilineInstances = []\n\n/**\n * Binds a `resize` event to the window which is used to adjust the content clamp when the user\n * changes the size of their browser.\n */\nfunction bindResizeHandler() {\n  window.addEventListener('resize', () => {\n    // Clear the timeout\n    clearTimeout(resizeTimeout)\n\n    // Start timing for event 'completion'\n    resizeTimeout = setTimeout(() => {\n      multilineInstances.forEach(instance => instance.clamp())\n    }, 100)\n  })\n}\n\n/**\n * Pushes the `MultilineClamp` instance into an array.\n *\n * @param {MultilineClamp} instance The `MultilineClamp` instance\n */\nexport function registerInstanceWithResizeHandler(instance) {\n  let found = false\n  multilineInstances.forEach((mli) => {\n    if (mli.target === instance.target) {\n      found = true\n    }\n  })\n\n  // Only push new instances that haven't already been registered\n  if (!found) {\n    multilineInstances.push(instance)\n  }\n\n  // Bind a resize handler to the window if one already hasn't been\n  if (!resizeHandlerBound) {\n    // Simple debounce method borrowed from:\n    // http://bencentra.com/code/2015/02/27/optimizing-window-resize.html\n    bindResizeHandler()\n    resizeHandlerBound = true\n  }\n}\n\n/**\n * Overrides the default options with any user-defined ones which are valid.\n *\n * @param   {Object} overrides User-defined options\n * @returns {Object}\n */\nexport function mergeDefaultOptionsWithCustomOverrides(overrides) {\n  // Lazy clone, destroys any custom object instances\n  const defaults = JSON.parse(JSON.stringify(defaultOptions))\n\n  // Fix the broken object instances\n  defaults.tagsExpression = defaultOptions.tagsExpression\n\n  // Clamp appendix\n  if (typeof overrides.clamp === 'string' || overrides.clamp instanceof window.HTMLElement) {\n    defaults.clamp = overrides.clamp\n  }\n\n  // Clamp size for all devices\n  if (overrides.clampSize && !Number.isNaN(overrides.clampSize)) {\n    defaults.clampSize = overrides.clampSize\n  }\n\n  // Responsive behaviours\n  if (overrides.responsive !== false && overrides.responsive instanceof window.Object) {\n    const breakpoints = {}\n    const { responsive } = overrides\n\n    Object.keys(responsive).forEach((key) => {\n      const breakpoint = responsive[key]\n\n      if (Number.isNaN(breakpoint)) {\n        console.warn(`The breakpoint for '${key}' contains an invalid value:`, breakpoint)\n      } else {\n        breakpoints[key] = breakpoint\n      }\n    })\n\n    // Only assign the `breakpoints` variable if it has keys\n    defaults.responsive = (Object.keys(breakpoints).length && breakpoints) || false\n  }\n\n  // Tags expression\n  if (overrides.tagsExpression instanceof window.RegExp) {\n    defaults.tagsExpression = overrides.tagsExpression\n  }\n\n  // Whitespace trimming\n  if (overrides.trimWhitespace && (\n    overrides.trimWhitespace instanceof window.Boolean ||\n    overrides.trimWhitespace instanceof window.RegExp\n  )) {\n    defaults.trimWhitespace = overrides.trimWhitespace\n  }\n\n  return defaults\n}\n","import {\n  mergeDefaultOptionsWithCustomOverrides,\n  registerInstanceWithResizeHandler,\n} from './functions'\n\n/**\n * Enables text on a website to be truncated over multiple lines which is not widely\n * supported in CSS natively.\n *\n * @class MultilineClamp\n */\nclass MultilineClamp {\n  tags = []\n\n  /**\n   * Constructor for the `MultilineClamp` class.\n   *\n   * @param {HTMLElement} target  An target element to apply a clamp to\n   * @param {Object}      options Option overrides\n   */\n  constructor(target, options = {}) {\n    const extendedOptions = mergeDefaultOptionsWithCustomOverrides(options)\n    this.options = extendedOptions\n\n    // Define the target element and original content\n    this.target = target\n    this.originalContent = target.innerHTML\n\n    // Get the target contents\n    const content = this.targetContents\n\n    // Store the original text in memory (non-persistent between page reloads)\n    if (!target.originalContent) {\n      target.originalContent = content\n    }\n\n    // Match all the tags in the target elements content\n    if (extendedOptions.tagsExpression instanceof window.RegExp) {\n      this.tags = content.match(extendedOptions.tagsExpression)\n    }\n\n    // Start clamp'n!\n    this.clamp()\n\n    // Register this instance with the resize handler\n    registerInstanceWithResizeHandler(this)\n  }\n\n  /**\n   * Retrieves the contents of the target element and applies any triming to it.\n   *\n   * @memberof MultilineClamp\n   * @return {String}\n   */\n  get targetContents() {\n    let html = this.target.innerHTML\n    const { trimWhitespace } = this.options\n\n    if (trimWhitespace) {\n      if (trimWhitespace instanceof window.RegExp) {\n        html = html.replace(trimWhitespace, '')\n      } else {\n        html = html.trim()\n      }\n    }\n\n    return html\n  }\n\n  /**\n   * Takes the stored content string and removes part of it until the clamp size is reached.\n   *\n   * @memberof MultilineClamp\n   */\n  clamp() {\n    const { characterLength, originalContent, target } = this\n    let content = originalContent\n\n    // If the length of the content doesn't exceed the clamp size simply do nothing!\n    if (content.length <= characterLength) return\n\n    // Clamp the content\n    content = content.substring(0, characterLength).trim()\n\n    // Let's check all of the tags we have, if any are missing or cut off we need to take\n    // the string back to the point where the opening tag begins.\n    const foundTags = this.findTagsInContent()\n\n    // If tags are found, clamp the string from the point which a valid tag exists at\n    if (foundTags.length) {\n      content = this.clampFromKnownTags(foundTags, content)\n    }\n\n    // Remove any spaces from the end of the string\n    content = content.replace(/\\s+$/g, '')\n\n    // Ensure the end of the content is a letter of number and not a symbol and/or space\n    let character\n    let cleaned = false\n    let count = content.length\n\n    while (--count >= 0 && !cleaned) {\n      character = content[count]\n\n      if (character === '>' || /(\\w|\\d)/i.test(character)) {\n        content = content.substring(0, count + 1)\n        cleaned = true\n      }\n    }\n\n    // Update the contents for the target element\n    target.innerHTML = content\n    target.appendChild(this.clampElement)\n  }\n\n  /**\n   * Strips away the content up until the point a tag can't be found in the string.\n   *\n   * @memberof MultilineClamp\n   * @return {Array} Tags that were found in the substring content\n   */\n  findTagsInContent() {\n    const foundTags = []\n    const { originalContent, tags } = this\n\n    let contentClone = originalContent\n    let contentOffset = 0\n\n    Object.keys(tags).forEach((tag) => {\n      tag = tags[tag]\n      const offset = contentClone.indexOf(tag)\n\n      if (offset !== -1) {\n        // Remove all the content up until this point so we can eliminate pushing the same tag twice\n        contentOffset = originalContent.length - contentClone.length\n        contentClone = contentClone.substr(offset + tag.length)\n\n        // Push the tag into the list\n        foundTags.push({\n          closing : tag.indexOf('</') !== -1,\n          name    : tag,\n          offset  : contentOffset + offset,\n        })\n      }\n    })\n\n    return foundTags\n  }\n\n  /**\n   * Uses the found tags in the clamped content to ensure that no broken tags are output to the\n   * browser which can break things.\n   *\n   * @memberof MultilineClamp\n   * @param  {Array}  foundTags Found tags in the substring content\n   * @param  {String} content   The freshly clamped content\n   * @return {String}           Modified content up until the point of the last found tag\n   */\n  clampFromKnownTags(foundTags, content) {\n    let clampOffset = content.length\n    let lastFound = false\n\n    foundTags.forEach((tag, index) => {\n      if (lastFound) return\n\n      const tagLength = tag.name.length\n      const contentOffset = content.substr(tag.offset, tagLength)\n\n      if (tagLength !== contentOffset.length) {\n        // Pull the content back to before the previous tag\n        if (tag.closing) {\n          const lastTag = foundTags[index - 1]\n          lastFound = true\n\n          clampOffset = lastTag.offset\n\n        // Otherwise pull the content back to just before this tag\n        } else {\n          clampOffset = tag.offset\n        }\n      }\n    })\n\n    return content.substring(0, clampOffset)\n  }\n\n  /**\n   * Returns the clamp size for the current breakpoint, if responsive clamps aren't enabled the\n   * default clamp size is used instead.\n   *\n   * @memberof MultilineClamp\n   * @return {Number}\n   */\n  get characterLength() {\n    const { responsive } = this.options\n    const windowWidth = window.innerWidth\n\n    let clampSize\n    if (responsive instanceof window.Object) {\n      Object.keys(responsive).forEach((breakpoint) => {\n        if (windowWidth <= breakpoint && !clampSize) {\n          clampSize = responsive[breakpoint]\n        }\n      })\n    }\n\n    return clampSize || this.options.clampSize\n  }\n\n  /**\n   * Builds the clamp element that is appended to the end of the content.\n   *\n   * @memberof MultilineClamp\n   * @return {HTMLElement}\n   */\n  get clampElement() {\n    const { clamp } = this.options\n\n    // If the clamp element is already an `HTMLElement`, simply return it\n    if (clamp instanceof window.HTMLElement) return clamp\n\n    // Create a new `span` element to wrap the clamp text within\n    const clampElement = document.createElement('span')\n    clampElement.appendChild(document.createTextNode(clamp))\n\n    return clampElement\n  }\n}\n\nexport default MultilineClamp\n\n// Expose `MultilineClamp` to the global scope\nwindow.MultilineClamp = MultilineClamp\n"],"sourceRoot":""}