{"version":3,"sources":["webpack://multiline-clamp/webpack/universalModuleDefinition","webpack://multiline-clamp/webpack/bootstrap","webpack://multiline-clamp/./src/index.js","webpack://multiline-clamp/./src/functions.js","webpack://multiline-clamp/./src/config.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","MultilineClamp","targets","_this","this","options","arguments","length","undefined","_classCallCheck","storeClampElement","extendedOptions","_functions","mergeDefaultOptionsWithCustomOverrides","NodeList","_toConsumableArray","forEach","target","originalContent","getTargetContents","tagsExpression","RegExp","tags","match","clamp","registerInstanceWithResizeHandler","html","innerHTML","trimWhitespace","replace","trim","characterLength","content","substring","character","foundTags","findTagsInContent","clampFromKnownTags","cleaned","count","test","appendChild","clampElement","_this2","contentClone","contentOffset","keys","tag","offset","indexOf","substr","push","closing","element","partialTags","newContent","index","tagLength","tagFromContent","lastTag","contentEnd","size","_this$options","clampSize","responsive","windowWidth","innerWidth","breakpoint","storedClampElement","cloneNode","HTMLElement","document","createElement","createTextNode","instance","found","multilineInstances","mli","resizeHandlerBound","addEventListener","clearTimeout","resizeTimeout","setTimeout","refreshClamp","overrides","defaults","JSON","parse","stringify","defaultOptions","Number","isNaN","breakpoints","console","warn","concat","Boolean"],"mappings":"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","file":"multiline-clamp.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"multiline-clamp\"] = factory();\n\telse\n\t\troot[\"multiline-clamp\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import {\n  mergeDefaultOptionsWithCustomOverrides,\n  registerInstanceWithResizeHandler,\n} from './functions'\n\n/**\n * Enables text on a website to be truncated over multiple lines which is not widely\n * supported in CSS natively.\n *\n * @class MultilineClamp\n */\nclass MultilineClamp {\n  storeClampElement = null\n\n  /**\n   * Constructor for the `MultilineClamp` class.\n   *\n   * @param {HTMLElement|NodeList} targets Target elements to apply a clamp to\n   * @param {Object}               options Option overrides\n   */\n  constructor(targets, options = {}) {\n    const extendedOptions = mergeDefaultOptionsWithCustomOverrides(options)\n\n    // Bind the options to the instance\n    this.options = extendedOptions\n\n    // Define the target elements\n    this.targets = targets instanceof window.NodeList ? [...targets] : [targets]\n\n    // Set up each target\n    this.targets.forEach((target) => {\n      // Get the original content for the target\n      if (!target.originalContent) {\n        target.originalContent = this.getTargetContents(target)\n      }\n\n      // Match all the tags in the target elements content\n      if (extendedOptions.tagsExpression instanceof window.RegExp) {\n        target.tags = target.originalContent.match(extendedOptions.tagsExpression) || []\n      }\n\n      // Start clamp'n!\n      this.clamp(target)\n    })\n\n    // Register this instance with the resize handler\n    registerInstanceWithResizeHandler(this)\n  }\n\n  /**\n   * Retrieves the contents of the target element and applies any triming to it.\n   *\n   * @memberof MultilineClamp\n   * @param  {HTMLElement} target A target element to get content for\n   * @return {String}             The parsed contents for the target\n   */\n  getTargetContents(target) {\n    let html = target.innerHTML\n    const { trimWhitespace } = this.options\n\n    if (trimWhitespace) {\n      if (trimWhitespace instanceof window.RegExp) {\n        html = html.replace(trimWhitespace, '')\n      } else {\n        html = html.trim()\n      }\n    }\n\n    return html\n  }\n\n  /**\n   * Takes the stored content string and removes part of it until the clamp size is reached.\n   *\n   * @memberof MultilineClamp\n   * @param {HTMLElement} target Target element to apply a clamp to\n   */\n  clamp(target) {\n    const { characterLength } = this\n    const { originalContent } = target\n    let content = originalContent\n\n    // If the length of the content doesn't exceed the clamp size simply do nothing!\n    if (content.length <= characterLength) return\n\n    // Clamp the content\n    content = content.substring(0, characterLength).trim()\n\n    // Let's check all of the tags we have, if any are missing or cut off we need to take\n    // the string back to the point where the opening tag begins.\n    const foundTags = this.findTagsInContent(target)\n\n    // If tags are found, clamp the string from the point which a valid tag exists at\n    if (foundTags.length) {\n      content = this.clampFromKnownTags(foundTags, content)\n    }\n\n    // Remove any spaces from the end of the string\n    content = content.replace(/\\s+$/g, '')\n\n    // Ensure the end of the content is a letter of number and not a symbol and/or space\n    let character\n    let cleaned = false\n    let count = content.length\n\n    while (--count >= 0 && !cleaned) {\n      character = content[count]\n\n      if (character === '>' || /(\\w|\\d)/i.test(character)) {\n        content = content.substring(0, count + 1)\n        cleaned = true\n      }\n    }\n\n    // Update the contents for the target element\n    target.innerHTML = content\n    target.appendChild(this.clampElement)\n  }\n\n  /**\n   * Re-applies the clamp to each target defined.\n   */\n  refreshClamp() {\n    this.targets.forEach(target => this.clamp(target))\n  }\n\n  /**\n   * Strips away the content up until the point a tag can't be found in the string.\n   *\n   * @memberof MultilineClamp\n   * @param  {HTMLElement} target Target element to apply a clamp to\n   * @return {Array}              Tags that were found in the substring content\n   */\n  findTagsInContent(target) {\n    const foundTags = []\n    const { originalContent, tags } = target\n\n    let contentClone = originalContent\n    let contentOffset = 0\n\n    Object.keys(tags).forEach((tag) => {\n      tag = tags[tag]\n      const offset = contentClone.indexOf(tag)\n\n      if (offset !== -1) {\n        // Remove all the content up until this point so we can eliminate pushing the same tag twice\n        contentOffset = originalContent.length - contentClone.length\n        contentClone = contentClone.substr(offset + tag.length)\n\n        // Push the tag into the list\n        foundTags.push({\n          closing : tag.indexOf('</') !== -1,\n          element : tag,\n          offset  : contentOffset + offset,\n        })\n      }\n    })\n\n    return foundTags\n  }\n\n  /**\n   * Uses the found tags in the clamped content to ensure that no broken tags are output to the\n   * browser which can break things.\n   *\n   * @memberof MultilineClamp\n   * @param  {Array}  foundTags Found tags in the substring content\n   * @param  {String} content   The freshly clamped content\n   * @return {String}           Modified content up until the point of the last found tag\n   */\n  clampFromKnownTags(foundTags, content) {\n    const { partialTags } = this.options\n    let newContent = content\n\n    foundTags.forEach((tag, index) => {\n      const tagLength = tag.element.length\n      const tagFromContent = content.substr(tag.offset, tagLength)\n\n      if (tagLength !== tagFromContent.length) {\n        const lastTag = foundTags[index - 1]\n\n        switch (partialTags) {\n          case 'pull':\n            // Simply pull the content back to just before the previous tag\n            newContent = newContent.substring(0, lastTag.offset)\n            break\n\n          case 'pull-and-retain':\n            if (tag.closing) {\n              newContent = newContent.substring(0, tag.offset)\n\n              // Grab the last bit of content before the previous tag\n              const contentEnd = newContent.substr(lastTag.offset + lastTag.element.length)\n\n              // Now remove the previous tag from the content and append the original ending back on\n              newContent = newContent.substring(0, lastTag.offset) + contentEnd\n            }\n            break\n\n          case 'complete':\n          default:\n            if (tag.closing) {\n              // Fixes the incomplete tag by replacing it with the original element\n              newContent = newContent.substring(0, tag.offset) + tag.element\n            }\n            break\n        }\n      }\n    })\n\n    return newContent\n  }\n\n  /**\n   * Returns the clamp size for the current breakpoint. If responsive clamps aren't enabled\n   * the default clamp size is used instead.\n   *\n   * @memberof MultilineClamp\n   * @return {Number} The clamp size to contain the content to\n   */\n  get characterLength() {\n    const { clampSize, responsive } = this.options\n    const windowWidth = window.innerWidth\n\n    let size\n    if (responsive instanceof window.Object) {\n      Object.keys(responsive).forEach((breakpoint) => {\n        if (windowWidth <= breakpoint && !size) {\n          size = responsive[breakpoint]\n        }\n      })\n    }\n\n    return size || clampSize\n  }\n\n  /**\n   * Builds the clamp element that is appended to the end of the content.\n   *\n   * @memberof MultilineClamp\n   * @return {HTMLElement} The DOM element for the clamp\n   */\n  get clampElement() {\n    // If the clamp already exists, use the stored version and clone it\n    if (this.storedClampElement) {\n      return this.storedClampElement.cloneNode(true)\n    }\n\n    const { clamp } = this.options\n    let clampElement = clamp\n\n    // Create a new `span` element to wrap the clamp text within if the given element is a string\n    if (!(clampElement instanceof window.HTMLElement)) {\n      clampElement = document.createElement('span')\n      clampElement.appendChild(document.createTextNode(clamp))\n    }\n\n    // Cache the element away so we don't have to re-generate it again\n    this.storedClampElement = clampElement\n    return clampElement\n  }\n}\n\nexport default MultilineClamp\n\n// Expose `MultilineClamp` to the global scope\nwindow.MultilineClamp = MultilineClamp\n","import defaultOptions from './config'\n\n/**\n * @type {Boolean}\n */\nlet resizeHandlerBound = false\n\n/**\n * @type {Number|null}\n */\nlet resizeTimeout\n\n/**\n * @type {Array}\n */\nconst multilineInstances = []\n\n/**\n * Binds a `resize` event to the window which is used to adjust the content clamp when the user\n * changes the size of their browser.\n */\nfunction bindResizeHandler() {\n  window.addEventListener('resize', () => {\n    // Clear the timeout\n    clearTimeout(resizeTimeout)\n\n    // Start timing for event 'completion'\n    resizeTimeout = setTimeout(() => {\n      multilineInstances.forEach(instance => instance.refreshClamp())\n    }, 100)\n  })\n}\n\n/**\n * Pushes the `MultilineClamp` instance into an array.\n *\n * @param {MultilineClamp} instance The `MultilineClamp` instance\n */\nexport function registerInstanceWithResizeHandler(instance) {\n  let found = false\n  multilineInstances.forEach((mli) => {\n    if (mli.target === instance.target) {\n      found = true\n    }\n  })\n\n  // Only push new instances that haven't already been registered\n  if (!found) {\n    multilineInstances.push(instance)\n  }\n\n  // Bind a resize handler to the window if one already hasn't been\n  if (!resizeHandlerBound) {\n    // Simple debounce method borrowed from:\n    // http://bencentra.com/code/2015/02/27/optimizing-window-resize.html\n    bindResizeHandler()\n    resizeHandlerBound = true\n  }\n}\n\n/**\n * Overrides the default options with any user-defined ones which are valid.\n *\n * @param   {Object} overrides User-defined options\n * @returns {Object}\n */\nexport function mergeDefaultOptionsWithCustomOverrides(overrides) {\n  // Lazy clone, destroys any custom object instances\n  const defaults = JSON.parse(JSON.stringify(defaultOptions))\n\n  // Fix the broken object instances\n  defaults.tagsExpression = defaultOptions.tagsExpression\n\n  // Clamp appendix\n  if (typeof overrides.clamp === 'string' || overrides.clamp instanceof window.HTMLElement) {\n    defaults.clamp = overrides.clamp\n  }\n\n  // Clamp size for all devices\n  if (overrides.clampSize && !Number.isNaN(overrides.clampSize)) {\n    defaults.clampSize = overrides.clampSize\n  }\n\n  // Partial tags\n  if (\n    typeof overrides.partialTags === 'string' &&\n    /^complete|pull|pull-and-retain$/.test(overrides.partialTags)\n  ) {\n    defaults.partialTags = overrides.partialTags\n  }\n\n  // Responsive behaviours\n  if (overrides.responsive !== false && overrides.responsive instanceof window.Object) {\n    const breakpoints = {}\n    const { responsive } = overrides\n\n    Object.keys(responsive).forEach((key) => {\n      const breakpoint = responsive[key]\n\n      if (Number.isNaN(breakpoint)) {\n        console.warn(`The breakpoint for '${key}' contains an invalid value:`, breakpoint)\n      } else {\n        breakpoints[key] = breakpoint\n      }\n    })\n\n    // Only assign the `breakpoints` variable if it has keys\n    defaults.responsive = (Object.keys(breakpoints).length && breakpoints) || false\n  }\n\n  // Tags expression\n  if (overrides.tagsExpression instanceof window.RegExp) {\n    defaults.tagsExpression = overrides.tagsExpression\n  }\n\n  // Whitespace trimming\n  if (overrides.trimWhitespace && (\n    overrides.trimWhitespace instanceof window.Boolean ||\n    overrides.trimWhitespace instanceof window.RegExp\n  )) {\n    defaults.trimWhitespace = overrides.trimWhitespace\n  }\n\n  return defaults\n}\n","/**\n * Default options for the `MultilineClamp` class.\n * @type {Object}\n */\nconst defaultOptions = {\n  /**\n   * A string or element that is appended after the clamped content.\n   * @type {String|HTMLElement}\n   */\n  clamp: '...',\n\n  /**\n   * The number of characters that should appear before the ellipsis.\n   * @type {Number}\n   */\n  clampSize: 72,\n\n  /**\n   * Defines how partial/invalid tags are handled when found in a clamped string.\n   * @type {String}\n   */\n  partialTags: 'complete',\n\n  /**\n   * Allows an object of clamps to be defined for different breakpoints.\n   * @type {Boolean|Object}\n   */\n  responsive: false,\n\n  /**\n   * Regular expression for matching certain tags within the content.\n   * @type {RegExp}\n   */\n  tagsExpression: /<(.|\\n)*?>/g,\n\n  /**\n   * Should whitespace around the content be stripped out.\n   * @type {Boolean|RegExp}\n   */\n  trimWhitespace: true,\n}\n\nexport default defaultOptions\n"],"sourceRoot":""}